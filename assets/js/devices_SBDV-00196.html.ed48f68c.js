"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[21757],{66838:(e,o,t)=>{t.r(o),t.d(o,{comp:()=>i,data:()=>c});var a=t(6199);const d={},i=(0,t(21065).A)(d,[["render",function(e,o){const t=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[o[11]||(o[11]=(0,a.Lk)("h1",{id:"sber-sbdv-00196",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#sber-sbdv-00196"},[(0,a.Lk)("span",null,"Sber SBDV-00196")])],-1)),(0,a.Lk)("table",null,[o[6]||(o[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[o[2]||(o[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"SBDV-00196")],-1)),(0,a.Lk)("tr",null,[o[1]||(o[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(t,{to:"/supported-devices/#v=Sber"},{default:(0,a.k6)((()=>o[0]||(o[0]=[(0,a.eW)("Sber")]))),_:1,__:[0]})])]),o[3]||(o[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"Smart Wall Switch (with neutral, single button)")],-1)),o[4]||(o[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"switch (state), power_on_behavior, allow_double_click, led_indicator_on_enable, led_indicator_on_h, led_indicator_on_s, led_indicator_on_b, led_indicator_off_enable, led_indicator_off_h, led_indicator_off_s, led_indicator_off_b, identify, relay_mode, action")],-1)),o[5]||(o[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/SBDV-00196.png",alt:"Sber SBDV-00196"})])],-1))])]),o[12]||(o[12]=(0,a.Fv)('<h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h2><h3 id="pairing" tabindex="-1"><a class="header-anchor" href="#pairing"><span>Pairing</span></a></h3><p>To put the device in pairing mode, detach button cover and press pairing button for 5 seconds until LED starts breathing animation, then release pairing button. When pairing process is completed, LED animation will stop.</p><h3 id="factory-reset" tabindex="-1"><a class="header-anchor" href="#factory-reset"><span>Factory reset</span></a></h3><p>This device resets itself to factory settings when it is removed from the Zigbee network, and this removal is initiated by coordinator (i.e. via frontend or by sending command to <code>zigbee2mqtt/bridge/request/device/remove</code> topic). If device is removed by pressing the pairing button (manual pairing), then its settings will remain intact.</p><h2 id="ota-updates" tabindex="-1"><a class="header-anchor" href="#ota-updates"><span>OTA updates</span></a></h2>',6)),(0,a.Lk)("p",null,[o[8]||(o[8]=(0,a.eW)("This device supports OTA updates, for more information see ")),(0,a.bF)(t,{to:"/guide/usage/ota_updates.html"},{default:(0,a.k6)((()=>o[7]||(o[7]=[(0,a.eW)("OTA updates")]))),_:1,__:[7]}),o[9]||(o[9]=(0,a.eW)("."))]),o[13]||(o[13]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(t,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)((()=>o[10]||(o[10]=[(0,a.eW)("How to use device type specific configuration")]))),_:1,__:[10]})])]),o[14]||(o[14]=(0,a.Fv)('<ul><li><p><code>identify_timeout</code>: Sets the duration of the identification procedure in seconds (i.e., how long the device would flash).The value ranges from 1 to 30 seconds (default: 3). The value must be a number with a minimum value of <code>1</code> and with a with a maximum value of <code>30</code></p></li><li><p><code>state_action</code>: State actions will also be published as &#39;action&#39; when true (default false). The value must be <code>true</code> or <code>false</code></p></li></ul><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>Switch</span></a></h3><p>The current state of this switch is in the published state under the <code>state</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state&quot;: &quot;ON&quot;}</code>, <code>{&quot;state&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state&quot;: &quot;&quot;}</code>.</p><h3 id="power-on-behavior-enum" tabindex="-1"><a class="header-anchor" href="#power-on-behavior-enum"><span>Power-on behavior (enum)</span></a></h3><p>Controls the behavior when the device is powered on after power loss. Value can be found in the published state on the <code>power_on_behavior</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;power_on_behavior&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;power_on_behavior&quot;: NEW_VALUE}</code>. The possible values are: <code>off</code>, <code>on</code>, <code>toggle</code>, <code>previous</code>.</p><h3 id="allow-double-click-binary" tabindex="-1"><a class="header-anchor" href="#allow-double-click-binary"><span>Allow double click (binary)</span></a></h3><p>Allow detection of double clicks, may introduce delay in reaction when enabled. Value can be found in the published state on the <code>allow_double_click</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;allow_double_click&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;allow_double_click&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> allow double click is ON, if <code>OFF</code> OFF.</p><h3 id="led-indication-binary" tabindex="-1"><a class="header-anchor" href="#led-indication-binary"><span>LED indication (binary)</span></a></h3><p>Is LED indicator enabled in ON state. Value can be found in the published state on the <code>led_indicator_on_enable</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_on_enable&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_on_enable&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> lED indication is ON, if <code>OFF</code> OFF.</p><h3 id="hue-numeric" tabindex="-1"><a class="header-anchor" href="#hue-numeric"><span>Hue (numeric)</span></a></h3><p>Hue of LED in ON state. Value can be found in the published state on the <code>led_indicator_on_h</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_on_h&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_on_h&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>359</code>. The unit of this value is <code>Â°</code>.</p><h3 id="saturation-numeric" tabindex="-1"><a class="header-anchor" href="#saturation-numeric"><span>Saturation (numeric)</span></a></h3><p>Saturation of LED in ON state. Value can be found in the published state on the <code>led_indicator_on_s</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_on_s&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_on_s&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>254</code>.</p><h3 id="brightness-numeric" tabindex="-1"><a class="header-anchor" href="#brightness-numeric"><span>Brightness (numeric)</span></a></h3><p>Brightness of LED in ON state. Value can be found in the published state on the <code>led_indicator_on_b</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_on_b&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_on_b&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>254</code>.</p><h3 id="led-indication-binary-1" tabindex="-1"><a class="header-anchor" href="#led-indication-binary-1"><span>LED indication (binary)</span></a></h3><p>Is LED indicator enabled in OFF state. Value can be found in the published state on the <code>led_indicator_off_enable</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_off_enable&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_off_enable&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> lED indication is ON, if <code>OFF</code> OFF.</p><h3 id="hue-numeric-1" tabindex="-1"><a class="header-anchor" href="#hue-numeric-1"><span>Hue (numeric)</span></a></h3><p>Hue of LED in OFF state. Value can be found in the published state on the <code>led_indicator_off_h</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_off_h&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_off_h&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>359</code>. The unit of this value is <code>Â°</code>.</p><h3 id="saturation-numeric-1" tabindex="-1"><a class="header-anchor" href="#saturation-numeric-1"><span>Saturation (numeric)</span></a></h3><p>Saturation of LED in OFF state. Value can be found in the published state on the <code>led_indicator_off_s</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_off_s&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_off_s&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>254</code>.</p><h3 id="brightness-numeric-1" tabindex="-1"><a class="header-anchor" href="#brightness-numeric-1"><span>Brightness (numeric)</span></a></h3><p>Brightness of LED in OFF state. Value can be found in the published state on the <code>led_indicator_off_b</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;led_indicator_off_b&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;led_indicator_off_b&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>254</code>.</p><h3 id="identify-enum" tabindex="-1"><a class="header-anchor" href="#identify-enum"><span>Identify (enum)</span></a></h3><p>Initiate device identification. Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;identify&quot;: NEW_VALUE}</code>. The possible values are: <code>identify</code>.</p><h3 id="relay-mode-enum" tabindex="-1"><a class="header-anchor" href="#relay-mode-enum"><span>Relay mode (enum)</span></a></h3><p>Decoupled mode for button. Value can be found in the published state on the <code>relay_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;relay_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;relay_mode&quot;: NEW_VALUE}</code>. The possible values are: <code>control_relay</code>, <code>decoupled</code>.</p><h3 id="action-enum" tabindex="-1"><a class="header-anchor" href="#action-enum"><span>Action (enum)</span></a></h3><p>Triggered action (e.g. a button click). Value can be found in the published state on the <code>action</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The possible values are: <code>hold</code>, <code>single</code>, <code>double</code>.</p>',30))])}]]),c=JSON.parse('{"path":"/devices/SBDV-00196.html","title":"Sber SBDV-00196 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Sber SBDV-00196 control via MQTT","description":"Integrate your Sber SBDV-00196 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-05-01T17:56:32.000Z"},"git":{"updatedTime":1749145894000,"contributors":[{"name":"Arthur Bernardes","username":"","email":"arthur.bernardes1@gmail.com","commits":1}],"changelog":[{"hash":"aeb82e4b3fb2eb795ef90bc5f984f9a20575e13f","time":1749145894000,"email":"arthur.bernardes1@gmail.com","author":"Arthur Bernardes","message":"Add AVATTO ZWOT12 (#3846)"}]},"filePathRelative":"devices/SBDV-00196.md"}')}}]);